{
  "_args": [
    [
      "amazon-cognito-identity-js@^3.3.3",
      "/home/elisabeth/Emerginov-II/node_modules/@aws-amplify/auth"
    ]
  ],
  "_from": "amazon-cognito-identity-js@>=3.3.3 <4.0.0",
  "_hasShrinkwrap": false,
  "_id": "amazon-cognito-identity-js@3.3.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/amazon-cognito-identity-js",
  "_nodeVersion": "10.13.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/amazon-cognito-identity-js_3.3.3_1578704416536_0.9253006858414077"
  },
  "_npmUser": {
    "email": "aws-amplify@amazon.com",
    "name": "aws-amplify-ops"
  },
  "_npmVersion": "lerna/3.20.2/node@v10.13.0+x64 (linux)",
  "_phantomChildren": {
    "base64-js": "1.3.1",
    "ieee754": "1.1.13",
    "isarray": "1.0.0"
  },
  "_requested": {
    "name": "amazon-cognito-identity-js",
    "raw": "amazon-cognito-identity-js@^3.3.3",
    "rawSpec": "^3.3.3",
    "scope": null,
    "spec": ">=3.3.3 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/@aws-amplify/auth"
  ],
  "_resolved": "https://registry.npmjs.org/amazon-cognito-identity-js/-/amazon-cognito-identity-js-3.3.3.tgz",
  "_shasum": "3c10a91def29b998d0974bf7ce63a262a6d4dd89",
  "_shrinkwrap": null,
  "_spec": "amazon-cognito-identity-js@^3.3.3",
  "_where": "/home/elisabeth/Emerginov-II/node_modules/@aws-amplify/auth",
  "author": {
    "email": "aws@amazon.com",
    "name": "Amazon Web Services",
    "url": "http://aws.amazon.com"
  },
  "bugs": {
    "url": "https://github.com/aws-amplify/amplify-js/issues"
  },
  "contributors": [
    {
      "name": "Paul Watts"
    },
    {
      "name": "Simon Buchan with Skilitics"
    },
    {
      "name": "Matt Durant"
    },
    {
      "name": "John Ferlito"
    },
    {
      "name": "Michael Hart"
    },
    {
      "name": "Tylor Steinberger"
    },
    {
      "name": "Jonathan Goldwasser"
    },
    {
      "name": "Gleb Promokhov"
    },
    {
      "name": "Min Bi"
    },
    {
      "name": "Michael Labieniec"
    },
    {
      "name": "Chetan Mehta",
      "email": "chetam@amazon.com"
    },
    {
      "name": "Ionut Trestian",
      "email": "trestian@amazon.com"
    }
  ],
  "dependencies": {
    "buffer": "4.9.1",
    "crypto-js": "^3.1.9-1",
    "js-cookie": "^2.1.4"
  },
  "description": "Amazon Cognito Identity Provider JavaScript SDK",
  "devDependencies": {
    "babel-cli": "^6.23.0",
    "babel-core": "^6.13.2",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.23.0",
    "babel-preset-es2015": "^6.22.0",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-2": "^6.24.1",
    "cross-env": "^3.1.4",
    "eslint": "^3.19.0",
    "eslint-config-airbnb-base": "^5.0.2",
    "eslint-config-prettier": "^6.3.0",
    "eslint-import-resolver-webpack": "^0.5.1",
    "eslint-plugin-import": "^2.7.0",
    "eslint-plugin-node": "^5.2.0",
    "eslint-plugin-promise": "^3.6.0",
    "eslint-plugin-standard": "^3.0.1",
    "jsdoc": "^3.4.0",
    "react": "^16.0.0",
    "react-native": "^0.44.0",
    "rimraf": "^2.5.4",
    "webpack": "^3.5.5"
  },
  "directories": {},
  "dist": {
    "fileCount": 85,
    "integrity": "sha512-uB1Bk2ezxVUz0vELZ4tI40ZJEYEZZcWdz8TVyNOPjQCKS+SszNUORTkOkL0KgawZMak7KhDfLTEXbInBeTsiow==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeGR4hCRA9TVsSAnZWagAAPqQP/is+sG7n2NLlX9XkEuQ6\nmPEdFXB5AqWfsT94meTz/ELpxNv5G3+bsrlhTpXxht8x56yBjqDrnvn/WTEB\nnwargAX5/GwGswg4JjYAQuS1HmDzEpcmJEHf13JxhAkNxiNJBZw3iplUraox\nf+A+HDQFGesGZSd0nbdwkwXUcmYGOOkUF7nNEGWG4dj4K4/PXar3I0//KsmU\nISS92xC/F8XFRitVQWO0RveHW9AUjZUfDVWYnBsob7GU+OX9p3oln8S5HyOl\npXo6B/WWstuy5vMWkdCM7N35aYDXpo9uARbVc5JzbyvBxfy/c/YyEC6ohiFt\n18c8jC41IcKpG7MrG4DE3zJKv9/Vx/YpuSfSmAY1ODeEIIt5/07FJFF0T5Ai\n4lT8l0EkkdDlR4xAUewj4EZ3aWjYQZMuqsLgjPbGLXPhAgZf2ND/Pyw6FWdb\nJSlUm41NWCUeegGnp5fKZWjKZezBjRm6ef30GSl+vJ4dzHVgfo7F34RNWvtp\nCpZ6vmsGjaapM5SyPT778xAm464sBw2Cwa2PMtVtX99H5jJnhSo1cR5Z4Yov\n1ufaDjjejBfMytNeoBFjC0Qau8demNpeM6s/xxkhbPXMgaHMXzyRC1fj2+to\nyp9+dzkAY3h4jEkvP3b7dU3Xrl1+Sjint3+emzNzMGSFSqj54OD94Hrrs9v3\nlTvY\r\n=8aCw\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "3c10a91def29b998d0974bf7ce63a262a6d4dd89",
    "tarball": "https://registry.npmjs.org/amazon-cognito-identity-js/-/amazon-cognito-identity-js-3.3.3.tgz",
    "unpackedSize": 1114747
  },
  "gitHead": "4f1eaade7017d4af91dcee049cadd7501c6db836",
  "homepage": "http://aws.amazon.com/cognito",
  "jsnext:main": "es/index.js",
  "keywords": [
    "amazon",
    "aws",
    "cognito",
    "identity",
    "react-native",
    "reactnative"
  ],
  "license": "SEE LICENSE IN LICENSE.txt",
  "licenses": [
    {
      "type": "Amazon Software License",
      "url": "http://aws.amazon.com/asl"
    }
  ],
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "jpeddicord",
      "email": "jacob@peddicord.net"
    },
    {
      "name": "amzn-oss",
      "email": "osa-3p@amazon.com"
    },
    {
      "name": "elorzafe",
      "email": "elorzafe@amazon.com"
    },
    {
      "name": "itrestian",
      "email": "trestian@amazon.com"
    },
    {
      "name": "jamesiri",
      "email": "jamesiri@amazon.com"
    },
    {
      "name": "aws-amplify-ops",
      "email": "aws-amplify@amazon.com"
    },
    {
      "name": "kaustavghosh06",
      "email": "kaustav.ghosh19@gmail.com"
    },
    {
      "name": "manuel.iglesias",
      "email": "manuel.iglesias@gmail.com"
    },
    {
      "name": "mlabieniec",
      "email": "michaellabieniec@gmail.com"
    },
    {
      "name": "powerful23",
      "email": "wenzhuo235@gmail.com"
    },
    {
      "name": "undefobj",
      "email": "rthrelkeld1980@gmail.com"
    }
  ],
  "module": "es/index.js",
  "name": "amazon-cognito-identity-js",
  "optionalDependencies": {},
  "react-native": {
    "./src/StorageHelper": "./src/StorageHelper-rn.js",
    "lib/index.js": "./enhance-rn.js"
  },
  "readme": "# Amazon Cognito Identity SDK for JavaScript\n\nYou can now use Amazon Cognito to easily add user sign-up and sign-in to your mobile and web apps. Your User Pool in Amazon Cognito is a fully managed user directory that can scale to hundreds of millions of users, so you don't have to worry about building, securing, and scaling a solution to handle user management and authentication.\n\nWe welcome developer feedback on this project. You can reach us by creating an issue on the\nGitHub repository or posting to the Amazon Cognito Identity forums and the below blog post:\n\n- https://github.com/aws-amplify/amplify-js\n- https://forums.aws.amazon.com/forum.jspa?forumID=173\n- https://aws.amazon.com/blogs/mobile/accessing-your-user-pools-using-the-amazon-cognito-identity-sdk-for-javascript/\n\nFor an overview of the Cognito authentication flow, refer to the following blog post:\n\n- https://aws.amazon.com/blogs/mobile/customizing-your-user-pool-authentication-flow/\n\n# Introduction\n\nThe Amazon Cognito Identity SDK for JavaScript allows JavaScript enabled applications to sign-up users, authenticate users, view, delete, and update user attributes within the Amazon Cognito Identity service. Other functionality includes password changes for authenticated users and initiating and completing forgot password flows for unauthenticated users.\n\nYour users will benefit from a number of security features including SMS-based Multi-Factor Authentication (MFA) and account verification via phone or email. The password features use the Secure Remote Password (SRP) protocol to avoid sending cleartext passwords over the wire.\n\n# Setup\n\nThere are two ways to install the Amazon Cognito Identity SDK for JavaScript and its dependencies,\ndepending on your project setup and experience with modern JavaScript build tools:\n\n- Download the bundle file from npm and include it in your HTML, or\n\n- Install the dependencies with npm and use a bundler like webpack.\n\n**Note:** This library uses the [Fetch API](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API). For [older browsers](https://caniuse.com/#feat=fetch) or in Node.js, you may need to include a polyfill. For example.\n\n```javascript\nglobal.fetch = require('node-fetch');\nvar AmazonCognitoIdentity = require('amazon-cognito-identity-js');\n```\n\nNote: We removed the build files in the github repo. You can use npm to download the whole package and extract the build files from it.\n\n## Install using separate JavaScript file\n\nThis method is simpler and does not require additional tools, but may have worse performance due to\nthe browser having to download multiple files.\n\nDownload the amazon-cognito-identity-js package from npm and get `amazon-cognito-identity.min.js` file from the `dist` folder. Place it in your project.\n\nOptionally, to use other AWS services, include a build of the [AWS SDK for JavaScript](http://aws.amazon.com/sdk-for-browser/).\n\nInclude all of the files in your HTML page before calling any Amazon Cognito Identity SDK APIs:\n\n```html\n<script src=\"/path/to/amazon-cognito-identity.min.js\"></script>\n<!-- optional: only if you use other AWS services -->\n<script src=\"/path/to/aws-sdk-2.6.10.js\"></script>\n```\n\n## Using NPM and Webpack\n\nWebpack is a popular JavaScript bundling and optimization tool, it has many configuration features that can build your\nsource JavaScript into one or more files for distribution. The following is a quick setup guide with specific notes for\nusing the Amazon Cognito Identity SDK for JavaScript with it, but there are many more ways it can be used, see\n[the Webpack site](https://webpack.github.io/), and in particular the\n[configuration documentation](http://webpack.github.io/docs/configuration.html)\n\nNote that webpack expects your source files to be structured as\n[CommonJS (Node.js-style) modules](https://webpack.github.io/docs/commonjs.html)\n(or [ECMAScript 2015 modules](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import)\nif you are using a transpiler such as [Babel](https://babeljs.io/).) If your project is not already using modules you\nmay wish to use [Webpack's module shimming features](http://webpack.github.io/docs/shimming-modules.html) to ease\nmigration.\n\n- Install [Node.js](https://nodejs.org) on your development machine (this will not be needed on your server.)\n\n- In your project add a `package.json`, either use `npm init` or the minimal:\n\n  ```json\n  {\n  \t\"private\": true\n  }\n  ```\n\n- Install the Amazon Cognito Identity SDK for JavaScript and the Webpack tool into your project with `npm` (the Node\n  Package Manager, which is installed with Node.js):\n\n  ```\n  > npm install --save-dev webpack json-loader\n  > npm install --save amazon-cognito-identity-js\n  ```\n\n  These will add a `node_modules` directory containing these tools and dependencies into your\n  project, you will probably want to exclude this directory from source control. Adding the `--save`\n  parameters will update the `package.json` file with instructions on what should be installed, so\n  you can simply call `npm install` without any parameters to recreate this folder later.\n\n- Create the configuration file for `webpack`, named `webpack.config.js`:\n\n  ```js\n  module.exports = {\n  \t// Example setup for your project:\n  \t// The entry module that requires or imports the rest of your project.\n  \t// Must start with `./`!\n  \tentry: './src/entry.js',\n  \t// Place output files in `./dist/my-app.js`\n  \toutput: {\n  \t\tpath: __dirname + '/dist',\n  \t\tfilename: 'my-app.js',\n  \t},\n  \tmodule: {\n  \t\trules: [\n  \t\t\t{\n  \t\t\t\ttest: /\\.json$/,\n  \t\t\t\tloader: 'json-loader',\n  \t\t\t},\n  \t\t],\n  \t},\n  };\n  ```\n\n- Create the following directory where `webpack.config.js` resides, and create the entry file:\n\n  ```\n  > mkdir -p src\n  > touch src/entry.js\n  ```\n\n- Add the following into your `package.json`\n\n  ```json\n  {\n  \t\"scripts\": {\n  \t\t\"build\": \"webpack\"\n  \t}\n  }\n  ```\n\n- Build your application bundle with `npm run build`\n\n## Install for React Native\n\nSee [Using NPM and Webpack](https://github.com/aws/amazon-cognito-identity-js#using-npm-and-webpack) for more information on NPM.\n\n- Install and add to your dependencies the Amazon Cognito Identity SDK for JavaScript:\n\n```\nnpm install --save amazon-cognito-identity-js\n```\n\n- Install react-native-cli if you have not already:\n\n```\nnpm install -g react-native-cli\n```\n\n- Link the native modules to your project:\n\n```\nreact-native link amazon-cognito-identity-js\n```\n\n## Configuration\n\nThe Amazon Cognito Identity SDK for JavaScript requires two configuration values from your AWS\nAccount in order to access your Cognito User Pool:\n\n- The User Pool Id, e.g. `us-east-1_aB12cDe34`\n- A User Pool App Client Id, e.g. `7ghr5379orhbo88d52vphda6s9`\n  - When creating the App, the generate client secret box must be **unchecked** because the\n    JavaScript SDK doesn't support apps that have a client secret.\n\nThe [AWS Console for Cognito User Pools](https://console.aws.amazon.com/cognito/users/) can be used to get or create these values.\n\nIf you will be using Cognito Federated Identity to provide access to your AWS resources or Cognito Sync you will also need the Id of a Cognito Identity Pool that will accept logins from the above Cognito User Pool and App, i.e. `us-east-1:85156295-afa8-482c-8933-1371f8b3b145`.\n\nNote that the various errors returned by the service are valid JSON so one can access the different exception types (err.code) and status codes (err.statusCode).\n\n## Relevant examples\n\nFor an example using babel-webpack of a React setup, see [babel-webpack example](https://github.com/aws/amazon-cognito-identity-js/tree/master/examples/babel-webpack).\n\nFor a working example using angular, see [cognito-angular2-quickstart](https://github.com/awslabs/aws-cognito-angular2-quickstart).\n\nFor a working example using ember.js, see:\n\n- [aws-serverless-ember](https://github.com/awslabs/aws-serverless-ember).\n- [aws-mobilehub-ember](https://github.com/awslabs/aws-mobilehub-ember).\n\nIf you are having issues when using Aurelia, please see the following [Stack Overflow post](http://stackoverflow.com/questions/39714424/how-can-i-get-the-amazon-cognito-identity-sdk-working-in-aurelia).\n\n## Usage\n\nThe usage examples below use the unqualified names for types in the Amazon Cognito Identity SDK for JavaScript. Remember to import or qualify access to any of these types:\n\n```javascript\n// When using loose Javascript files:\nvar CognitoUserPool = AmazonCognitoIdentity.CognitoUserPool;\n\n// Modules, e.g. Webpack:\nvar AmazonCognitoIdentity = require('amazon-cognito-identity-js');\nvar CognitoUserPool = AmazonCognitoIdentity.CognitoUserPool;\n\n// ES Modules, e.g. transpiling with Babel\nimport {\n\tCognitoUserPool,\n\tCognitoUserAttribute,\n\tCognitoUser,\n} from 'amazon-cognito-identity-js';\n```\n\n**Use case 1.** Registering a user with the application. One needs to create a CognitoUserPool object by providing a UserPoolId and a ClientId and signing up by using a username, password, attribute list, and validation data.\n\n```javascript\nvar poolData = {\n\tUserPoolId: '...', // Your user pool id here\n\tClientId: '...', // Your client id here\n};\nvar userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n\nvar attributeList = [];\n\nvar dataEmail = {\n\tName: 'email',\n\tValue: 'email@mydomain.com',\n};\n\nvar dataPhoneNumber = {\n\tName: 'phone_number',\n\tValue: '+15555555555',\n};\nvar attributeEmail = new AmazonCognitoIdentity.CognitoUserAttribute(dataEmail);\nvar attributePhoneNumber = new AmazonCognitoIdentity.CognitoUserAttribute(\n\tdataPhoneNumber\n);\n\nattributeList.push(attributeEmail);\nattributeList.push(attributePhoneNumber);\n\nuserPool.signUp('username', 'password', attributeList, null, function(\n\terr,\n\tresult\n) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tvar cognitoUser = result.user;\n\tconsole.log('user name is ' + cognitoUser.getUsername());\n});\n```\n\n**Use case 2.** Confirming a registered, unauthenticated user using a confirmation code received via SMS.\n\n```javascript\nvar poolData = {\n\tUserPoolId: '...', // Your user pool id here\n\tClientId: '...', // Your client id here\n};\n\nvar userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\nvar userData = {\n\tUsername: 'username',\n\tPool: userPool,\n};\n\nvar cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\ncognitoUser.confirmRegistration('123456', true, function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 3.** Resending a confirmation code via SMS for confirming registration for a unauthenticated user.\n\n```javascript\ncognitoUser.resendConfirmationCode(function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 4.** Authenticating a user and establishing a user session with the Amazon Cognito Identity service.\n\n```javascript\nimport * as AWS from 'aws-sdk/global';\n\nvar authenticationData = {\n\tUsername: 'username',\n\tPassword: 'password',\n};\nvar authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(\n\tauthenticationData\n);\nvar poolData = {\n\tUserPoolId: '...', // Your user pool id here\n\tClientId: '...', // Your client id here\n};\nvar userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\nvar userData = {\n\tUsername: 'username',\n\tPool: userPool,\n};\nvar cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\ncognitoUser.authenticateUser(authenticationDetails, {\n\tonSuccess: function(result) {\n\t\tvar accessToken = result.getAccessToken().getJwtToken();\n\n\t\t//POTENTIAL: Region needs to be set if not already set previously elsewhere.\n\t\tAWS.config.region = '<region>';\n\n\t\tAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n\t\t\tIdentityPoolId: '...', // your identity pool id here\n\t\t\tLogins: {\n\t\t\t\t// Change the key below according to the specific region your user pool is in.\n\t\t\t\t'cognito-idp.<region>.amazonaws.com/<YOUR_USER_POOL_ID>': result\n\t\t\t\t\t.getIdToken()\n\t\t\t\t\t.getJwtToken(),\n\t\t\t},\n\t\t});\n\n\t\t//refreshes credentials using AWS.CognitoIdentity.getCredentialsForIdentity()\n\t\tAWS.config.credentials.refresh(error => {\n\t\t\tif (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t} else {\n\t\t\t\t// Instantiate aws sdk service objects now that the credentials have been updated.\n\t\t\t\t// example: var s3 = new AWS.S3();\n\t\t\t\tconsole.log('Successfully logged!');\n\t\t\t}\n\t\t});\n\t},\n\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n});\n```\n\nNote that if device tracking is enabled for the user pool with a setting that user opt-in is required, you need to implement an onSuccess(result, userConfirmationNecessary) callback, collect user input and call either setDeviceStatusRemembered to remember the device or setDeviceStatusNotRemembered to not remember the device.\n\nNote also that if CognitoUser.authenticateUser throws ReferenceError: navigator is not defined when running on Node.js, follow the instructions on the following [Stack Overflow post](http://stackoverflow.com/questions/40219518/aws-cognito-unauthenticated-login-error-window-is-not-defined-js).\n\n**Use case 5.** Retrieve user attributes for an authenticated user.\n\n```javascript\ncognitoUser.getUserAttributes(function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tfor (i = 0; i < result.length; i++) {\n\t\tconsole.log(\n\t\t\t'attribute ' + result[i].getName() + ' has value ' + result[i].getValue()\n\t\t);\n\t}\n});\n```\n\n**Use case 6.** Verify user attribute for an authenticated user.\n\nNote that the inputVerificationCode method needs to be defined but does not need to actually do anything. If you would like the user to input the verification code on another page, you can set inputVerificationCode to null. If inputVerificationCode is null, onSuccess will be called immediately (assuming there is no error).\n\n```javascript\ncognitoUser.getAttributeVerificationCode('email', {\n\tonSuccess: function(result) {\n\t\tconsole.log('call result: ' + result);\n\t},\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n\tinputVerificationCode: function() {\n\t\tvar verificationCode = prompt('Please input verification code: ', '');\n\t\tcognitoUser.verifyAttribute('email', verificationCode, this);\n\t},\n});\n```\n\n**Use case 7.** Delete user attribute for an authenticated user.\n\n```javascript\nvar attributeList = [];\nattributeList.push('nickname');\n\ncognitoUser.deleteAttributes(attributeList, function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 8.** Update user attributes for an authenticated user.\n\n```javascript\nvar attributeList = [];\nvar attribute = {\n\tName: 'nickname',\n\tValue: 'joe',\n};\nvar attribute = new AmazonCognitoIdentity.CognitoUserAttribute(attribute);\nattributeList.push(attribute);\n\ncognitoUser.updateAttributes(attributeList, function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 9.** Enabling MFA for a user on a pool that has an optional MFA setting for an authenticated user.\n\nNote: this method is now deprecated. Please use `setUserMfaPreference` instead.\n\n```javascript\ncognitoUser.enableMFA(function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 10.** Disabling MFA for a user on a pool that has an optional MFA setting for an authenticated user.\n\nNote: this method is now deprecated. Please use `setUserMfaPreference` instead.\n\n```javascript\ncognitoUser.disableMFA(function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 11.** Changing the current password for an authenticated user.\n\n```javascript\ncognitoUser.changePassword('oldPassword', 'newPassword', function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 12.** Starting and completing a forgot password flow for an unauthenticated user.\n\nFor example:\n\n```html\n<body>\n    <label for=\"#code\">Code: </label>\n    <input id=\"code\"></input>\n    </br>\n    <label for=\"#new_password\">New Password: </label>\n    <input id=\"new_password\" type=\"password\"></input>\n    <br/>\n</body>\n```\n\n```javascript\ncognitoUser.forgotPassword({\n\tonSuccess: function(data) {\n\t\t// successfully initiated reset password request\n\t\tconsole.log('CodeDeliveryData from forgotPassword: ' + data);\n\t},\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n\t//Optional automatic callback\n\tinputVerificationCode: function(data) {\n\t\tconsole.log('Code sent to: ' + data);\n\t\tvar code = document.getElementById('code').value;\n\t\tvar newPassword = document.getElementById('new_password').value;\n\t\tcognitoUser.confirmPassword(verificationCode, newPassword, {\n\t\t\tonSuccess() {\n\t\t\t\tconsole.log('Password confirmed!');\n\t\t\t},\n\t\t\tonFailure(err) {\n\t\t\t\tconsole.log('Password not confirmed!');\n\t\t\t},\n\t\t});\n\t},\n});\n```\n\n**Use case 13.** Deleting an authenticated user.\n\n```javascript\ncognitoUser.deleteUser(function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('call result: ' + result);\n});\n```\n\n**Use case 14.** Signing out from the application.\n\n```javascript\ncognitoUser.signOut();\n```\n\n**Use case 15.** Global signout for an authenticated user(invalidates all issued tokens).\n\n```javascript\ncognitoUser.globalSignOut(callback);\n```\n\n**Use case 16 with React Native.**\n\nIn React Native, loading the persisted current user information requires an extra async call to be made:\n\n```javascript\nvar poolData = {\n\tUserPoolId: '...', // Your user pool id here\n\tClientId: '...', // Your client id here\n};\nvar userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n\nuserPool.storage.sync(function(err, result) {\n\tif (err) {\n\t} else if (result === 'SUCCESS') {\n\t\tvar cognitoUser = userPool.getCurrentUser();\n\t\t// Continue with steps in Use case 16\n\t}\n});\n```\n\n**Use case 16.** Retrieving the current user from local storage.\n\n```javascript\nvar poolData = {\n\tUserPoolId: '...', // Your user pool id here\n\tClientId: '...', // Your client id here\n};\nvar userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\nvar cognitoUser = userPool.getCurrentUser();\n\nif (cognitoUser != null) {\n\tcognitoUser.getSession(function(err, session) {\n\t\tif (err) {\n\t\t\talert(err.message || JSON.stringify(err));\n\t\t\treturn;\n\t\t}\n\t\tconsole.log('session validity: ' + session.isValid());\n\n\t\t// NOTE: getSession must be called to authenticate user before calling getUserAttributes\n\t\tcognitoUser.getUserAttributes(function(err, attributes) {\n\t\t\tif (err) {\n\t\t\t\t// Handle error\n\t\t\t} else {\n\t\t\t\t// Do something with attributes\n\t\t\t}\n\t\t});\n\n\t\tAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n\t\t\tIdentityPoolId: '...', // your identity pool id here\n\t\t\tLogins: {\n\t\t\t\t// Change the key below according to the specific region your user pool is in.\n\t\t\t\t'cognito-idp.<region>.amazonaws.com/<YOUR_USER_POOL_ID>': session\n\t\t\t\t\t.getIdToken()\n\t\t\t\t\t.getJwtToken(),\n\t\t\t},\n\t\t});\n\n\t\t// Instantiate aws sdk service objects now that the credentials have been updated.\n\t\t// example: var s3 = new AWS.S3();\n\t});\n}\n```\n\n**Use case 17.** Integrating User Pools with Cognito Identity.\n\n```javascript\nvar cognitoUser = userPool.getCurrentUser();\n\nif (cognitoUser != null) {\n\tcognitoUser.getSession(function(err, result) {\n\t\tif (result) {\n\t\t\tconsole.log('You are now logged in.');\n\n\t\t\t//POTENTIAL: Region needs to be set if not already set previously elsewhere.\n\t\t\tAWS.config.region = '<region>';\n\n\t\t\t// Add the User's Id Token to the Cognito credentials login map.\n\t\t\tAWS.config.credentials = new AWS.CognitoIdentityCredentials({\n\t\t\t\tIdentityPoolId: 'YOUR_IDENTITY_POOL_ID',\n\t\t\t\tLogins: {\n\t\t\t\t\t'cognito-idp.<region>.amazonaws.com/<YOUR_USER_POOL_ID>': result\n\t\t\t\t\t\t.getIdToken()\n\t\t\t\t\t\t.getJwtToken(),\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t});\n}\n//call refresh method in order to authenticate user and get new temp credentials\nAWS.config.credentials.refresh(error => {\n\tif (error) {\n\t\tconsole.error(error);\n\t} else {\n\t\tconsole.log('Successfully logged!');\n\t}\n});\n```\n\n_note that you can not replace the login key with a variable because it will be interpreted literally. if you want to use a variable, the resolution to [issue 17](https://github.com/aws/amazon-cognito-identity-js/issues/162) has a working example_\n\n**Use case 18.** List all remembered devices for an authenticated user. In this case, we need to pass a limit on the number of devices retrieved at a time and a pagination token is returned to make subsequent calls. The pagination token can be subsequently passed. When making the first call, the pagination token should be null.\n\n```javascript\ncognitoUser.listDevices(limit, paginationToken, {\n\tonSuccess: function(result) {\n\t\tconsole.log('call result: ' + result);\n\t},\n\tonFailure: function(err) {\n\t\talert(err.message);\n\t},\n});\n```\n\n**Use case 19.** List information about the current device.\n\n```javascript\ncognitoUser.getDevice({\n\tonSuccess: function(result) {\n\t\tconsole.log('call result: ' + result);\n\t},\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n});\n```\n\n**Use case 20.** Remember a device.\n\n```javascript\ncognitoUser.setDeviceStatusRemembered({\n\tonSuccess: function(result) {\n\t\tconsole.log('call result: ' + result);\n\t},\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n});\n```\n\n**Use case 21.** Do not remember a device.\n\n```javascript\ncognitoUser.setDeviceStatusNotRemembered({\n\tonSuccess: function(result) {\n\t\tconsole.log('call result: ' + result);\n\t},\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n});\n```\n\n**Use case 22.** Forget the current device.\n\n```javascript\ncognitoUser.forgetDevice({\n\tonSuccess: function(result) {\n\t\tconsole.log('call result: ' + result);\n\t},\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n});\n```\n\n**Use case 23.** Authenticate a user and set new password for a user that was created using AdminCreateUser API.\n\n```javascript\n\n    var cognitoUser, sessionUserAttributes; // global variables to handle completeNewPasswordChallenge flow\n\n    // ...\n\n    cognitoUser.authenticateUser(authenticationDetails, {\n        onSuccess: function (result) {\n            // User authentication was successful\n        },\n\n        onFailure: function(err) {\n            // User authentication was not successful\n        },\n\n        mfaRequired: function(codeDeliveryDetails) {\n            // MFA is required to complete user authentication.\n            // Get the code from user and call\n            cognitoUser.sendMFACode(mfaCode, this)\n        },\n\n        newPasswordRequired: function(userAttributes, requiredAttributes) {\n            // User was signed up by an admin and must provide new\n            // password and required attributes, if any, to complete\n            // authentication.\n\n            // the api doesn't accept this field back\n            delete userAttributes.email_verified;\n\n            // store userAttributes on global variable\n            sessionUserAttributes = userAttributes;\n        }\n    });\n\n    // ... handle new password flow on your app\n    handleNewPassword(newPassword) {\n      cognitoUser.completeNewPasswordChallenge(newPassword, sessionUserAttributes);\n    }\n\n```\n\n**Use case 24.** Retrieve the MFA Options for the user in case MFA is optional.\n\n```javascript\ncognitoUser.getMFAOptions(function(err, mfaOptions) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('MFA options for user ' + mfaOptions);\n});\n```\n\n**Use case 25.** Authenticating a user with a passwordless custom flow.\n\n```javascript\ncognitoUser.setAuthenticationFlowType('CUSTOM_AUTH');\n\ncognitoUser.initiateAuth(authenticationDetails, {\n\tonSuccess: function(result) {\n\t\t// User authentication was successful\n\t},\n\tonFailure: function(err) {\n\t\t// User authentication was not successful\n\t},\n\tcustomChallenge: function(challengeParameters) {\n\t\t// User authentication depends on challenge response\n\t\tvar challengeResponses = 'challenge-answer';\n\t\tcognitoUser.sendCustomChallengeAnswer(challengeResponses, this);\n\t},\n});\n```\n\n**Use case 26.** Using cookies to store cognito tokens\n\n```javascript\n```\n\nTo use the CookieStorage you have to pass it in the constructor map of CognitoUserPool and CognitoUser (when constructed directly):\n\n```js\n var poolData = {\n     UserPoolId : '...', // Your user pool id here\n     ClientId : '...' // Your client id here\n     Storage: new AmazonCognitoIdentity.CookieStorage({domain: \".yourdomain.com\"})\n };\n\n var userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\n\n var userData = {\n     Username: 'username',\n     Pool: userPool,\n     Storage: new AmazonCognitoIdentity.CookieStorage({domain: \".yourdomain.com\"})\n };\n```\n\nThe CookieStorage object receives a map (data) in its constructor that may have these values:\n\n- data.domain Cookies domain (mandatory)\n- data.path Cookies path (default: '/')\n- data.expires Cookie expiration (in days, default: 365)\n- data.secure Cookie secure flag (default: true)\n\n**Use case 27.** Selecting the MFA method and authenticating using TOTP.\n\n```js\nvar authenticationData = {\n\tUsername: 'username',\n\tPassword: 'password',\n};\nvar authenticationDetails = new AmazonCognitoIdentity.AuthenticationDetails(\n\tauthenticationData\n);\nvar poolData = {\n\tUserPoolId: '...', // Your user pool id here\n\tClientId: '...', // Your client id here\n};\nvar userPool = new AmazonCognitoIdentity.CognitoUserPool(poolData);\nvar userData = {\n\tUsername: 'username',\n\tPool: userPool,\n};\nvar cognitoUser = new AmazonCognitoIdentity.CognitoUser(userData);\n\ncognitoUser.authenticateUser(authenticationDetails, {\n\tonSuccess: function(result) {\n\t\tvar accessToken = result.getAccessToken().getJwtToken();\n\t},\n\n\tonFailure: function(err) {\n\t\talert(err.message || JSON.stringify(err));\n\t},\n\n\tmfaSetup: function(challengeName, challengeParameters) {\n\t\tcognitoUser.associateSoftwareToken(this);\n\t},\n\n\tassociateSecretCode: function(secretCode) {\n\t\tvar challengeAnswer = prompt('Please input the TOTP code.', '');\n\t\tcognitoUser.verifySoftwareToken(challengeAnswer, 'My TOTP device', this);\n\t},\n\n\tselectMFAType: function(challengeName, challengeParameters) {\n\t\tvar mfaType = prompt('Please select the MFA method.', ''); // valid values for mfaType is \"SMS_MFA\", \"SOFTWARE_TOKEN_MFA\"\n\t\tcognitoUser.sendMFASelectionAnswer(mfaType, this);\n\t},\n\n\ttotpRequired: function(secretCode) {\n\t\tvar challengeAnswer = prompt('Please input the TOTP code.', '');\n\t\tcognitoUser.sendMFACode(challengeAnswer, this, 'SOFTWARE_TOKEN_MFA');\n\t},\n\n\tmfaRequired: function(codeDeliveryDetails) {\n\t\tvar verificationCode = prompt('Please input verification code', '');\n\t\tcognitoUser.sendMFACode(verificationCode, this);\n\t},\n});\n```\n\n**Use case 28.** Enabling and setting SMS MFA as the preferred MFA method for the user.\n\n```js\nsmsMfaSettings = {\n\tPreferredMfa: true,\n\tEnabled: true,\n};\ncognitoUser.setUserMfaPreference(smsMfaSettings, null, function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t}\n\tconsole.log('call result ' + result);\n});\n```\n\n**Use case 29.** Enabling and setting TOTP MFA as the preferred MFA method for the user.\n\n```js\ntotpMfaSettings = {\n\tPreferredMfa: true,\n\tEnabled: true,\n};\ncognitoUser.setUserMfaPreference(null, totpMfaSettings, function(err, result) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t}\n\tconsole.log('call result ' + result);\n});\n```\n\n**Use case 30.** Authenticating a user with a user password auth flow.\n\n```js\ncognitoUser.setAuthenticationFlowType('USER_PASSWORD_AUTH');\n\ncognitoUser.authenticateUser(authenticationDetails, {\n\tonSuccess: function(result) {\n\t\t// User authentication was successful\n\t},\n\tonFailure: function(err) {\n\t\t// User authentication was not successful\n\t},\n\tmfaRequired: function(codeDeliveryDetails) {\n\t\t// MFA is required to complete user authentication.\n\t\t// Get the code from user and call\n\t\tcognitoUser.sendMFACode(verificationCode, this);\n\t},\n});\n```\n\n**Use case 31.** Retrieve the user data for an authenticated user.\n\n```js\ncognitoUser.getUserData(function(err, userData) {\n\tif (err) {\n\t\talert(err.message || JSON.stringify(err));\n\t\treturn;\n\t}\n\tconsole.log('User data for user ' + userData);\n});\n\n// If you want to force to get the user data from backend,\n// you can set the bypassCache to true\ncognitoUser.getUserData(\n\tfunction(err, userData) {\n\t\tif (err) {\n\t\t\talert(err.message || JSON.stringify(err));\n\t\t\treturn;\n\t\t}\n\t\tconsole.log('User data for user ' + userData);\n\t},\n\t{ bypassCache: true }\n);\n```\n\n**Use case 32.** Handling expiration of the Id Token.\n\n```js\nrefresh_token = session.getRefreshToken(); // receive session from calling cognitoUser.getSession()\nif (AWS.config.credentials.needsRefresh()) {\n\tcognitoUser.refreshSession(refresh_token, (err, session) => {\n\t\tif (err) {\n\t\t\tconsole.log(err);\n\t\t} else {\n\t\t\tAWS.config.credentials.params.Logins[\n\t\t\t\t'cognito-idp.<YOUR-REGION>.amazonaws.com/<YOUR_USER_POOL_ID>'\n\t\t\t] = session.getIdToken().getJwtToken();\n\t\t\tAWS.config.credentials.refresh(err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('TOKEN SUCCESSFULLY UPDATED');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n```\n\n## Network Configuration\n\nThe Amazon Cognito Identity JavaScript SDK will make requests to the following endpoints\n\n- For Amazon Cognito User Pool service request handling: \"https://cognito-idp.us-east-1.amazonaws.com\"\n  - This endpoint may change based on which region your Cognito User Pool was created in.\n\nFor most frameworks you can whitelist the domain by whitelisting all AWS endpoints with \"\\*.amazonaws.com\".\n\n## Random numbers\n\nIn order to authenticate with the Amazon Cognito User Pool Service, the client needs to generate a random number as part of the SRP protocol. The AWS SDK is only compatible with modern browsers, and these include [support for cryptographically strong random values](https://caniuse.com/#feat=cryptography). If you do need to support older browsers then you should include a strong polyfill for `window.crypto.getRandomValues()` before including this library.\n\n## Change Log\n\nLatest change logs have been moved to [CHANGELOG.md](./CHANGELOG.md).\n\n**v2.0.2:**\n\n- What has changed\n  - To make a new version for NPM package sync with Github repo.\n\n**v2.0.1:**\n\n- What has changed\n  - Added migration lambda trigger support.\n\n**v1.31.0:**\n\n- What has changed\n  - Added lib folder.\n\n**v1.30.0:**\n\n- What has changed\n\n  - Temporary fix to lock down the AWS SDK version to a compatible one.\n\n**v1.29.0:**\n\n- What has changed\n  - Fixing verify software token call to work with access token.\n\n**v1.28.0:**\n\n- What has changed\n  - Not sending UserContextData if it is not available.\n\n**v1.27.0:**\n\n- What has changed\n  - Added support for TOTP and new MFA settings APIs.\n\n**v1.26.0:**\n\n- What has changed\n  - Fixed typescript typings.\n\n**v1.25.0:**\n\n- What has changed\n  - Added cookie storage support and solved bug related to clock drift parsing.\n\n**v1.24.0:**\n\n- What has changed\n  - Fixed bug related to missing callback\n\n**v1.23.0:**\n\n- What has changed\n  - Added react native optimizations for BigInteger\n\n**v1.19.0:**\n\n- What has changed\n  - Added UserSub return on sign up\n\n**v1.18.0:**\n\n- What has changed\n  - Added missing result in resendConfirmationCode.\n\n**v1.17.0:**\n\n- What has changed\n  - Added non-minified files.\n\n**v1.16.0:**\n\n- What has changed\n  - Brought in JSBN and updated Notice file.\n\n**v1.15.0:**\n\n- What has changed\n  - Solved an issue that occurred rarely related to the padding of the U value that is used in computing the HKDF.\n\n**v1.14.0:**\n\n- What has changed\n  - Importing only the CognitoIdentityServiceProvider client and util from the AWS SDK.\n\n**v1.13.0:**\n\n- What has changed\n  - Removed SJCL as a dependency and fixed typescript typings.\n\n**v1.12.0:**\n\n- What has changed\n  - Added typescript typings.\n\n**v1.11.0:**\n\n- What has changed\n  - Added challenge parameters to the mfaRequired function of the return object.\n\n**v1.10.0:**\n\n- What has changed\n  - Clearing tokens when they have been revoked and adding retrieval for MFAOptions.\n\n**v1.9.0:**\n\n- What has changed\n  - Fixed dependency on local storage. Reverting to memory use when local storage is not available.\n\n**v1.7.0:**\n\n- What has changed\n  - Fixed Cannot read property 'NewDeviceMetadata' of undefined bug.\n\n**v1.6.0:**\n\n- What has changed\n  - Support for Admin create user flow. Users being signed up by admins will be able to authenticate using their one time passwords.\n\n**v1.5.0:**\n\n- What has changed\n  - Changed webpack support to follow AWS-SDK usage.\n\n**v1.2.0:**\n\n- What has changed\n  - Derived the region from the user pool id so the region doesn't need to be configured anymore.\n\n**v1.1.0:**\n\n- What has changed\n  - Fixed a bug in token parsing.\n  - Removed moment.js as a dependency.\n\n**v1.0.0:**\n\n- GA release. In this GA service launch, the following new features have been added to Amazon Cognito Your User Pools.\n\n- Whats new\n\n  - Webpack support.\n  - Support for Custom authentication flows. Developers can implement custom authentication flows around Cognito Your User Pools. See developer documentation for details.\n  - Devices support in User Pools. Users can remember devices and skip MFA verification for remembered devices.\n  - Scopes to control permissions for attributes in a User Pool.\n  - Configurable expiration time for refresh tokens.\n  - Set custom FROM and REPLY-TO for email verification messages.\n  - Search users in your pool using user attributes.\n  - Global sign-out for a user.\n  - Removed dependency to sjcl bytes codec.\n\n- What has changed\n  - Authentication flow in Javascript SDK now uses Custom Authentication API\n  - Two new exceptions added for the authentication APIs: These exceptions have been added to accurately represent the user state when the username is invalid and when the user is not confirmed. You will have to update your application to handle these exceptions.\n    - UserNotFoundException: Returned when the username user does not exist.\n    - UserNotConfirmedException: Returned when the user has not been confirmed.\n    - PasswordResetRequiredException: When administrator has requested for a password reset for the user.\n\n**v0.9.0:**\n\n- Initial release. Developer preview.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/aws-amplify/amplify-js.git"
  },
  "scripts": {
    "build": "npm run clean && npm run build:commonjs && npm run build:es && npm run build:umd",
    "build:commonjs": "cross-env BABEL_ENV=commonjs babel src --out-dir lib",
    "build:es": "cross-env BABEL_ENV=es babel src --out-dir es",
    "build:umd": "webpack",
    "clean": "rimraf lib es",
    "doc": "jsdoc src -d docs",
    "format": "echo \"Not implemented\"",
    "lint": "eslint src",
    "lint2": "eslint enhance-rn.js",
    "test": "jest -w 1 --passWithNoTests"
  },
  "types": "./index.d.ts",
  "version": "3.3.3"
}
