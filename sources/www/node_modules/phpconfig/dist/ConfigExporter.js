"use strict";
/*
 * PHPConfig - Loads Uniter's PHP configuration
 * Copyright (c) Dan Phillimore (asmblah)
 * https://github.com/uniter/phpconfig/
 *
 * Released under the MIT license
 * https://github.com/uniter/phpconfig/raw/master/MIT-LICENSE.txt
 */
Object.defineProperty(exports, "__esModule", { value: true });
var hasOwn = {}.hasOwnProperty;
/**
 * Fetches the config for the given library from the root config
 *
 * @param {RootConfig} allConfig
 * @param {string} mainLibraryName
 * @param {string=} subLibraryName
 * @returns {SubConfig}
 */
function getLibraryConfigFromRoot(allConfig, mainLibraryName, subLibraryName) {
    var _a, _b, _c, _d;
    var mainConfig = (_b = ((_a = allConfig.settings) !== null && _a !== void 0 ? _a : {})[mainLibraryName]) !== null && _b !== void 0 ? _b : {};
    if (typeof mainConfig !== 'object') {
        throw new Error("Config for main library \"" + mainLibraryName + "\" should be an object");
    }
    if (subLibraryName == null) {
        return mainConfig;
    }
    var subConfig = (_d = ((_c = allConfig.settings) !== null && _c !== void 0 ? _c : {})[subLibraryName]) !== null && _d !== void 0 ? _d : null;
    if (subConfig === null) {
        subConfig = {};
    }
    // Config for the sub-library that is specified under the main library
    // should override settings for the sub-library that are set outside
    return Object.assign({}, subConfig, mainConfig[subLibraryName]);
}
/**
 * Fetches the config for the given main library from a plugin config
 *
 * @param {PluginConfig} pluginConfig
 * @param {string} mainLibraryName
 * @returns {string[]}
 */
function getMainLibraryConfigPathsFromPlugin(pluginConfig, mainLibraryName) {
    var _a, _b;
    var mainConfig = (_a = pluginConfig[mainLibraryName]) !== null && _a !== void 0 ? _a : null;
    if (mainConfig === null) {
        // No config is specified for the main library by this plugin
        return [];
    }
    if (typeof mainConfig === 'string') {
        // Main config is provided via the simple path-string syntax;
        // the main library config should be required from the given path
        return [mainConfig];
    }
    if (typeof mainConfig === 'object') {
        // Main config is provided via the extended object syntax;
        // the main library config (if given) should be required from the path
        // given as a property of this object with the main library's name
        var pathToMainConfig = (_b = mainConfig[mainLibraryName]) !== null && _b !== void 0 ? _b : null;
        if (pathToMainConfig === null) {
            // Main library's extended syntax does not specify anything for itself
            return [];
        }
        if (typeof pathToMainConfig !== 'string') {
            throw new Error("Value for main library extended config path \"" + mainLibraryName + "." + mainLibraryName + "\" should be a path");
        }
        return [pathToMainConfig];
    }
    throw new Error("Value for main library \"" + mainLibraryName + "\" should be a path or object");
}
/**
 * Fetches the config for the given sub-library from a plugin config
 *
 * @param {PluginConfig} pluginConfig
 * @param {string} mainLibraryName
 * @param {string} subLibraryName
 * @returns {string[]}
 */
function getSubLibraryConfigPathsFromPlugin(pluginConfig, mainLibraryName, subLibraryName) {
    var _a, _b;
    var isolatedPathToSubLibraryConfig = (_a = pluginConfig[subLibraryName]) !== null && _a !== void 0 ? _a : null;
    var pathToSubLibraryConfigUnderMain = null;
    var mainLibraryConfig = (_b = pluginConfig[mainLibraryName]) !== null && _b !== void 0 ? _b : {};
    if (hasOwn.call(pluginConfig, subLibraryName)) {
        if (typeof isolatedPathToSubLibraryConfig !== 'string') {
            throw new Error("Isolated value for sub-library \"" + subLibraryName + "\" should be a path");
        }
    }
    if (typeof mainLibraryConfig === 'object') {
        // Main config is provided via the extended object syntax;
        // the sub-library config (if given) should be required from the path
        // given as a property of this object with the sub-library's name
        if (hasOwn.call(mainLibraryConfig, subLibraryName)) {
            if (typeof mainLibraryConfig[subLibraryName] !== 'string') {
                throw new Error("Value for sub-library under \"" + mainLibraryName + "." + subLibraryName + "\" should be a path");
            }
            pathToSubLibraryConfigUnderMain = mainLibraryConfig[subLibraryName];
        }
    }
    else if (typeof mainLibraryConfig !== 'string') {
        throw new Error("Value for main library extended config path \"" + mainLibraryName + "." + mainLibraryName + "\" should be a path or object");
    }
    var paths = [];
    if (isolatedPathToSubLibraryConfig !== null) {
        paths.push(isolatedPathToSubLibraryConfig);
    }
    // Sub-library config given under main should take precedence,
    // so that defaults may be specified in the "isolated" config
    // and then overridden here
    if (pathToSubLibraryConfigUnderMain !== null) {
        paths.push(pathToSubLibraryConfigUnderMain);
    }
    return paths;
}
/**
 * Fetches the paths to plugins for a given library from a single plugin config
 *
 * @param {PluginConfig} pluginConfig
 * @param {string} mainLibraryName
 * @param {string=} subLibraryName
 * @returns {string[]}
 */
function getLibraryConfigPathsFromPlugin(pluginConfig, mainLibraryName, subLibraryName) {
    return subLibraryName
        ? getSubLibraryConfigPathsFromPlugin(pluginConfig, mainLibraryName, subLibraryName)
        : getMainLibraryConfigPathsFromPlugin(pluginConfig, mainLibraryName);
}
/**
 * Fetches the paths to plugins for a given library from a set of plugin configs
 *
 * @param {PluginConfig[]} pluginConfigs
 * @param {string} mainLibraryName
 * @param {string} subLibraryName
 * @returns {string[]}
 */
function getLibraryConfigPathsFromPlugins(pluginConfigs, mainLibraryName, subLibraryName) {
    var libraryConfigPaths = [];
    for (var _i = 0, pluginConfigs_1 = pluginConfigs; _i < pluginConfigs_1.length; _i++) {
        var pluginConfig = pluginConfigs_1[_i];
        var pluginSubLibraryConfigPaths = getLibraryConfigPathsFromPlugin(pluginConfig, mainLibraryName, subLibraryName);
        libraryConfigPaths.push.apply(libraryConfigPaths, pluginSubLibraryConfigPaths);
    }
    return libraryConfigPaths;
}
/**
 * @inheritDoc
 */
var ConfigExporter = /** @class */ (function () {
    function ConfigExporter(serialisationChecker) {
        this.serialisationChecker = serialisationChecker;
    }
    /**
     * @inheritDoc
     */
    ConfigExporter.prototype.exportLibrary = function (rootConfig, mainLibraryName, subLibraryName) {
        var libraryName = subLibraryName !== null && subLibraryName !== void 0 ? subLibraryName : mainLibraryName;
        var topLevelConfig = getLibraryConfigFromRoot(rootConfig, mainLibraryName, subLibraryName);
        if (!this.serialisationChecker.isSerialisable(topLevelConfig)) {
            throw new Error("Top-level config for library \"" + libraryName + "\" is not serialisable");
        }
        return {
            libraryName: libraryName,
            topLevelConfig: topLevelConfig,
            pluginConfigFilePaths: rootConfig.plugins
                ? getLibraryConfigPathsFromPlugins(rootConfig.plugins, mainLibraryName, subLibraryName)
                : [],
        };
    };
    return ConfigExporter;
}());
exports.default = ConfigExporter;
//# sourceMappingURL=ConfigExporter.js.map